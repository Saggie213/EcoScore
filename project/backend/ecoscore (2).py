# -*- coding: utf-8 -*-
"""EcoScore.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1escqtcElRdNnC4DMa9Q3zQB3iHvX4t3T
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import joblib

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import r2_score, mean_squared_error

# Load dataset
df = pd.read_csv("/content/ESG_Sentiment.csv")
print(df.head())
print(df.isnull().sum())

# Select features and target
X = df[['Product Name', 'Sentence', 'Sentiment', 'Environmental Score']]
y = df['ESG Score']

preprocessor = ColumnTransformer(transformers=[
    ('product_name', OneHotEncoder(handle_unknown='ignore'), ['Product Name']),
    ('sentiment', OneHotEncoder(handle_unknown='ignore'), ['Sentiment']),
    ('sentence_tfidf', TfidfVectorizer(max_features=300), 'Sentence'),
], remainder='passthrough')  # Keeps 'Environmental Score' as is

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Full pipeline
pipeline = Pipeline([
    ('preprocessing', preprocessor),
    ('regressor', GradientBoostingRegressor(random_state=42))
])

# Hyperparameter grid
param_grid = {
    'regressor__n_estimators': [100, 200],
    'regressor__max_depth': [3, 5],
    'regressor__learning_rate': [0.05, 0.1],
    'regressor__subsample': [0.8, 1.0]
}

# Grid search
grid_search = GridSearchCV(pipeline, param_grid, cv=3, n_jobs=-1, scoring='r2')
grid_search.fit(X_train, y_train)

# Best model
best_pipeline = grid_search.best_estimator_
print("Best Parameters:", grid_search.best_params_)

y_pred = best_pipeline.predict(X_test)
r2 = r2_score(y_test, y_pred)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print("R2 Score:", r2)
print("RMSE:", rmse)

# Get feature names
ohe_product = best_pipeline.named_steps['preprocessing'].named_transformers_['product_name'].get_feature_names_out(['Product Name'])
ohe_sentiment = best_pipeline.named_steps['preprocessing'].named_transformers_['sentiment'].get_feature_names_out(['Sentiment'])
tfidf_features = best_pipeline.named_steps['preprocessing'].named_transformers_['sentence_tfidf'].get_feature_names_out()
feature_names = np.concatenate([ohe_product, ohe_sentiment, tfidf_features, ['Environmental Score']])

# Extract importances
importances = best_pipeline.named_steps['regressor'].feature_importances_
sorted_indices = np.argsort(importances)[-15:]

# Plot top 15
plt.figure(figsize=(10, 6))
plt.barh(range(len(sorted_indices)), importances[sorted_indices], align='center')
plt.yticks(range(len(sorted_indices)), [feature_names[i] for i in sorted_indices])
plt.xlabel('Feature Importance')
plt.title('Top 15 Feature Importances (Gradient Boosting)')
plt.tight_layout()
plt.show()

# Save model
joblib.dump(best_pipeline, "eco_score_gradient_boosting.pkl")

# Load model and predict on a sample
model = joblib.load("eco_score_gradient_boosting.pkl")

sample_input = pd.DataFrame({
    'Product Name': ['Fossil fuel Cars'],
    'Sentence': ['The product heavily relies on non-renewable sources and is harmful to the environment.'],
    'Sentiment': ['Negative'],
    'Environmental Score': [45]
})

predicted_score = model.predict(sample_input)
print("Predicted ESG Score:", round(predicted_score[0]))